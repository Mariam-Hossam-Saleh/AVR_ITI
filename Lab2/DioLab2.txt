MDIO_enuErrorStatus_t MDIO_enuSetPinConfigration(Copy_enuPortNum,Copy_enuPinNum,Copy_enuConfigration);

Purpose:
This API configures a specific pin within a port with the desired functionality, such as input, output, or pull-up/down configuration. It allows precise control over individual pins in a microcontroller's GPIO.

Parameters:

    Copy_enuPortNum:
        Specifies the port containing the pin to configure (e.g., PORTA, PORTB, PORTC, etc.).

    Copy_enuPinNum:
        Specifies the pin within the port to configure (e.g., PIN0, PIN1, PIN2, etc.).

    Copy_enuConfigration:
        Specifies the desired configuration for the pin. Examples:
            OUTPUT,INPUT_PULLUP,INPUT_PULLDOWN
Return:
    MDIO_OK, MDIO_INVALID_PARAM, MDIO_NOK .........

Example : MDIO_enuSetPinConfigration(PORTA, PIN0, OUTPUT);
______________________________________________________________________________________________________________________________________________________

MDIO_enuErrorStatus_t MDIO_enuSetPortConfigration(Copy_enuPortNum,Copy_enuConfigration);

Purpose:
This API configures all pins in a specific port at once, saving time when multiple pins need the same configuration (e.g., all as inputs or outputs).

Parameters:

    Copy_enuPortNum:
        Specifies the port to configure (e.g., PORTA, PORTB, PORTC, etc.).
        
    Copy_enuConfigration:
        Specifies the configuration to apply to all pins in the port (e.g., all INPUT, all OUTPUT).
Return:
    MDIO_OK, MDIO_INVALID_PARAM, MDIO_NOK .........
Example : MDIO_enuSetPortConfigration(PORTB, INPUT);
______________________________________________________________________________________________________________________________________________________

MDIO_enuErrorStatus_t MDIO_enuSetPinValue( Copy_enuPortNum, Copy_enuPinNum, Copy_enuState);

Purpose:
This API sets the logical state of a specific pin (e.g., HIGH or LOW).

Parameters:

    Copy_enuPortNum:
        Specifies the port containing the pin (e.g., PORTA, PORTB, etc.).

    Copy_enuPinNum:
        Specifies the pin within the port to set (e.g., PIN0, PIN1, PIN2, etc.).

    Copy_enuState:
        Specifies the desired state for the pin: HIGH,LOW
Return:
    MDIO_OK, MDIO_INVALID_PARAM, MDIO_NOK .........

Example: MDIO_enuSetPinValue(PORTA, PIN0, HIGH);

______________________________________________________________________________________________________________________________________________________

MDIO_enuErrorStatus_t MDIO_enuSetPortValue(Copy_enuPortNum,Copy_enuPortState);

Purpose:
This API sets the logical states of all pins in a specified port at once, which is useful for initializing or modifying the state of a port efficiently.
Parameters:

    Copy_enuPortNum:
        Specifies the port to modify (e.g., PORTA, PORTB, etc.).

    Copy_enuPortState:
        Specifies the collective state for all pins in the port (e.g. all HIGH, all LOW).
Return:
    MDIO_OK, MDIO_INVALID_PARAM, MDIO_NOK .........

Example: MDIO_enuSetPortValue(PORTC, all HIGH);

______________________________________________________________________________________________________________________________________________________

MDIO_enuErrorStatus_t MDIO_enuGetPinValue(Copy_enuPortNum,Copy_enuPinNum,u8* Add_pu8PinValue);

Purpose:
This API retrieves the logical state (HIGH or LOW) of a specific pin.

    Copy_enuPortNum:
        Specifies the port containing the pin to read (e.g., PORTA, PORTB, etc.).

    Copy_enuPinNum:
        Specifies the pin within the port to read (e.g., PIN0, PIN1, PIN2, etc.).

    Add_pu8PinValue:
        Pointer to store the retrieved pin value.

    Return: MDIO_OK, MDIO_INVALID_PARAM, MDIO_NULL_PTR, MDIO_NOK.........

Example: MDIO_enuGetPinValue(PORTA, PIN1, &pinValue);

______________________________________________________________________________________________________________________________________________________

Applications

1) LED Control System

Purpose: Create a system where multiple LEDs are controlled via push buttons.

Functionality: Use the APIs to configure multiple pins for buttons and LEDs. When a button is pressed, its corresponding LED turns on.

2)Binary Counter with LEDs using a switch to start 

Purpose: Implement a binary counter displayed using 8 LEDs After pressing the button to start this counter.

Functionality: Increment a binary counter value and display it on 8 LEDs connected to a single port.